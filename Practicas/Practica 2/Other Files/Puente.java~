//====================================================//
//  			PUENTE			      //
//====================================================//

import monitor.*

class Monitor extends AbstractMonitor {
	// Class which incapsulate the monitor	
	private Condition cocheN;
	private Condition cocheS;
	private boolean cocheNCruzando = false;
	private boolean cocheSCruzando = false;

	private void entrarCocheN(){
		if ((!cocheNCruzando && !cocheSCruzando) || cocheNCruz )
			cocheS.wait();
		cocheNCruzando = true;
		cocheN.signal();
	}

	private void salirCocheN(){
		cocheNCruzando=false;
	}

	private void entrarCocheS(){
		if ((!cocheNCruzando && !cocheSCruzando) || cocheSCruz )
			cocheN.wait();
		cocheSCruzando = true;
		cocheS.signal();
	}

	private void salirCocheS(){
		cocheSCruzando=false;
	}
}

class cocheN implements Runnable {
	int cocheNumero;
	public Thread thr;		//encapsulated object for the thread
	private Puente puente;		//encapsulated object for the monitor
	public cocheN(String name, int tNumb, Puente tMon){
		// Initialization, for example:
		cocheNumero = tNumb;
		puente = tMon;
		thr = new Thread(this, name);
	}
	public void run(){
		//Method executed concurrently by the thread:
		mon.entrarCocheN();
		thr.Sleep(100);
		mon.salirCocheN();
	}
}

class cocheS implements Runnable {
	int cocheNumero;
	public Thread thr;		//encapsulated object for the thread
	private Puente puente;		//encapsulated object for the monitor
	public cocheS(String name, int tNumb, Puente tMon){
		// Initialization
		cocheNumero = tNumb;
		puente = tMon;
		thr = new Thread(this, name);
	}
	public void run(){
		//Method executed concurrently by the thread
		mon.entrarCocheS();
		thr.Sleep(100);
		mon.salirCocheS();
	}
}

class Puente{
	int coches = 5, i = 0;
	public static void main(String[] args){
		try {
			Puente myPuente = new Puente();
			cocheN[] carsN = new MyThread[coches];		// the number (and type) of threads I want to execute concurrently
			cocheS[] carsS = new MyThread[coches];		// the number (and type) of threads I want to execute concurrently
			for (i=0;i<coches;i++){
				carsN[i] = new cocheN("CocheN n°"+(i+1), i+1, threadsMon);		//Creates the threads
			}
			for (i=0;i<coches;i++){
				carsS[i] = new cocheS("CocheS n°"+(i+1), i+1, threadsMon);		//Creates the threads
			}
			for (i=0;i<numberOfThreads;i++){
				carsN[i].thr.start();		//Executes the threads previously created
				carsS[i].thr.start();		//Executes the threads previously created
			}
			for (i=0;i<numberOfThreads;i++){
				carsN[i].thr.join();		//Waits for the threads to have finished
				carsS[i].thr.join();		//Waits for the threads to have finished
			}
		} catch (InterruptedException e) { 
			System.out.println ("Exceptions happen sometimes.");
		}
	}
}
